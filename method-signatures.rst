===============================
Method signatures and selectors
===============================

Method signatures
=================

- A `method signature` is a ASCII representation of a smart contract method identifier
- A `method signature` looks like this: ``approve(address,uint256)``
- A `method signature` can be generated by looking at a solidity function's `name` and `input types`
- A `method signature` can be generated by looking at an ABI method's `name` and `input types`
- A `method signature` can be hashed using the ``keccak256`` (sha3) algorithm to create a ``method ID``
- Sometimes people refer to method IDs as method signatures

.. note::
    There are no spaces between method signature arguments. For example ``address,uint256`` is correct and ``address, uint256`` is not. If you add spaces to a method selector and try to call the selector it will not work.

Examples
--------

Solidity method definition example for ``approve(address,uint256)`` (Taken from USDC):

.. code-block:: python

    function approve(address spender, uint256 amount) external returns (bool);

ABI method definition example for ``approve(address,uint256)``:

.. code-block:: json

    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }

Method selectors
================
- A `method selector` is a 4 byte (8 character) hexadecimal representation of a `method signature`
- Method selectors are generated by taking the first (big endian) 8 bytes of ``keccak256(methodSignature)``
- A method selector looks like this: ``0x095ea7b3``
- Every time a method (or function) is called in EVM a ``method selector`` is used to find and execute the code
- When sending a transaction to a smart contract the first 4 bytes of ``input data`` (or ``calldata``) is the method selector
- Method selectors are sometimes referred to as method signature hashes, or ``sig hashes``


Generating signature hashes
---------------------------

Manually
^^^^^^^^

1. Go to `Keccak256 Hash Generator <https://bfotool.com/keccak256-hash-generator>`_
2. Type ``approve(address,uint256)`` in the input field
3. Press ``Generate Hash``
4. Copy the hash
5. Extract the first (left most) 8 characters from the hash
6. You should end up with ``095ea7b3``

With solidity
^^^^^^^^^^^^^

.. code-block:: python

    bytes4 selector = bytes4(keccak256("decimals()"));
    
Argument encoding
=================

Encoding inputs
---------------
- using brownie
- manually

Packed encoding
---------------

Decoding signature hashes
-------------------------

Event topics
============

Constructor
===========

References
==========

`Medium - What are ABI encoding functions in solidity <https://medium.com/@libertylocked/what-are-abi-encoding-functions-in-solidity-0-4-24-c1a90b5ddce8>`_

`Solidity Documentation - Function selectors <https://docs.soliditylang.org/en/v0.8.6/abi-spec.html?highlight=selector#function-selector>_`

`Keccak256 Hash Generator <https://bfotool.com/keccak256-hash-generator>`_

`ABI Hash Hex <https://abi.hashex.org/>`_